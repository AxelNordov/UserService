openapi: 3.0.3
info:
  title: User Service
  description: >-
    This is a User Service server.
    And other info about this server.
  contact:
    email: iq@ua.fm
  license:
    name: The MIT License
    url: https://opensource.org/licenses/MIT
  version: 1.0.0
servers:
  - url: http://localhost:8081
tags:
  - name: user-controller
    description: Operations about Users
  - name: user-group-controller
    description: Operations about UserGroups

paths:
  /api/v1/users:
    get:
      tags:
        - user-controller
      summary: Get Users
      description: Returns a list of Users
      operationId: getUsers
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: Invalid status value
          content: { }
    post:
      tags:
        - user-controller
      summary: Create user
      description: This creates user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid Order
          content: { }
        '405':
          description: Invalid input
          content: { }
        default:
          description: successful operation
          content: { }
  /api/v1/users/{uuid}:
    get:
      tags:
        - user-controller
      summary: Get user by id
      operationId: getUserById
      parameters:
        - name: uuid
          in: path
          description: 'The id that needs to be fetched.'
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid is supplied
          content: { }
        '404':
          description: User not found
          content: { }
    put:
      tags:
        - user-controller
      summary: Updated user
      description: Updates user.
      operationId: updateUser
      parameters:
        - name: uuid
          in: path
          description: The id that need to be updated
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Updated user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid id supplied
          content: { }
        '404':
          description: User not found
          content: { }
    delete:
      tags:
        - user-controller
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: uuid
          in: path
          description: The id that needs to be deleted
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '400':
          description: Invalid id supplied
          content: { }
        '404':
          description: User not found
          content: { }
  /api/v1/usergroups:
    get:
      tags:
        - user-group-controller
      summary: Get UserGroups
      description: Returns a list of UserGroups
      operationId: getUserGroups
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserGroup'
        '400':
          description: Invalid status value
          content: { }
    post:
      tags:
        - user-group-controller
      summary: Create UserGroup
      description: This creates UserGroup.
      operationId: createUserGroup
      requestBody:
        description: Created UserGroup object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UserGroup'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroup'
        '400':
          description: Invalid Order
          content: { }
        '405':
          description: Invalid input
          content: { }
        default:
          description: successful operation
          content: { }
  /api/v1/usergroups/{uuid}:
    get:
      tags:
        - user-group-controller
      summary: Get user by id
      operationId: getUserGroupById
      parameters:
        - name: uuid
          in: path
          description: 'The id that needs to be fetched.'
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroup'
        '400':
          description: Invalid is supplied
          content: { }
        '404':
          description: UserGroup not found
          content: { }
    put:
      tags:
        - user-group-controller
      summary: Updated user
      description: Updates user.
      operationId: updateUserGroup
      parameters:
        - name: uuid
          in: path
          description: The id that need to be updated
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Updated user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UserGroup'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroup'
        '400':
          description: Invalid id supplied
          content: { }
        '404':
          description: UserGroup not found
          content: { }
    delete:
      tags:
        - user-group-controller
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUserGroup
      parameters:
        - name: uuid
          in: path
          description: The id that needs to be deleted
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '400':
          description: Invalid id supplied
          content: { }
        '404':
          description: UserGroup not found
          content: { }

components:
  schemas:
    User:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        status:
          type: string
          nullable: true
          enum:
            - active
            - blocked
        userGroups:
          type: array
          items:
            type: string
            format: uuid
    UserGroup:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        name:
          type: string
